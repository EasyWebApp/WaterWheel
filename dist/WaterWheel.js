//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('WaterWheel', factory);
    else if (typeof module === 'object')
        return  module.exports = factory();
    else
        return  this['WaterWheel'] = factory();

})(function () {

function merge(base, path) {

    return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {

        return input[index - 1] === '.' ? match : '';
    });
}

function outPackage(name) {
    return (/^[^./]/.test(name)
    );
}

    var require = _require_.bind(null, './');

    function _require_(base, path) {

        var module = _module_[
                outPackage( path )  ?  path  :  ('./' + merge(base, path))
            ],
            exports;

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = require( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    _require_.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _module_ = {
    './Observable': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var _asyncGenerator = function () {
                function AwaitValue(value) {
                    this.value = value;
                }function AsyncGenerator(gen) {
                    var front, back;function send(key, arg) {
                        return new Promise(function (resolve, reject) {
                            var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null };if (back) {
                                back = back.next = request;
                            } else {
                                front = back = request;resume(key, arg);
                            }
                        });
                    }function resume(key, arg) {
                        try {
                            var result = gen[key](arg);var value = result.value;if (value instanceof AwaitValue) {
                                Promise.resolve(value.value).then(function (arg) {
                                    resume("next", arg);
                                }, function (arg) {
                                    resume("throw", arg);
                                });
                            } else {
                                settle(result.done ? "return" : "normal", result.value);
                            }
                        } catch (err) {
                            settle("throw", err);
                        }
                    }function settle(type, value) {
                        switch (type) {case "return":
                                front.resolve({ value: value, done: true });break;case "throw":
                                front.reject(value);break;default:
                                front.resolve({ value: value, done: false });break;}front = front.next;if (front) {
                            resume(front.key, front.arg);
                        } else {
                            back = null;
                        }
                    }this._invoke = send;if (typeof gen.return !== "function") {
                        this.return = undefined;
                    }
                }if (typeof Symbol === "function" && Symbol.asyncIterator) {
                    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
                        return this;
                    };
                }AsyncGenerator.prototype.next = function (arg) {
                    return this._invoke("next", arg);
                };AsyncGenerator.prototype.throw = function (arg) {
                    return this._invoke("throw", arg);
                };AsyncGenerator.prototype.return = function (arg) {
                    return this._invoke("return", arg);
                };return { wrap: function wrap(fn) {
                        return function () {
                            return new AsyncGenerator(fn.apply(this, arguments));
                        };
                    }, await: function _await(value) {
                        return new AwaitValue(value);
                    } };
            }();

            var _queue_ = new WeakMap();

            var Observable = function () {
                /**
                 * @param {EmitterWrapper} emitter
                 */
                function Observable(emitter) {
                    var _this2 = this;

                    _classCallCheck(this, Observable);

                    var queue = [];

                    _queue_.set(this, queue);

                    var next;

                    var wait = function wait() {
                        return queue.push(new Promise(function (resolve) {
                            return next = resolve;
                        }));
                    };

                    wait();

                    this.done = false;

                    emitter(function (value) {
                        return next(value), wait();
                    }, function (value) {
                        return next(value), _this2.done = true;
                    });
                }

                _createClass(Observable, [{
                    key: Symbol.asyncIterator,
                    value: function value() {
                        var _this = this;

                        return _asyncGenerator.wrap( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                            var queue, i;
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            queue = _queue_.get(_this);
                                            i = 0;

                                        case 2:
                                            if (_this.done) {
                                                _context.next = 10;
                                                break;
                                            }

                                            _context.next = 5;
                                            return _asyncGenerator.await(queue[i]);

                                        case 5:
                                            _context.next = 7;
                                            return _context.sent;

                                        case 7:
                                            i++;
                                            _context.next = 2;
                                            break;

                                        case 10:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }))();
                    }

                    /**
                     * @return {*} Final value
                     */

                }, {
                    key: 'toPromise',
                    value: function () {
                        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                            var iterator, value, result;
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            iterator = this[Symbol.asyncIterator]();

                                        case 1:
                                            if (!true) {
                                                _context2.next = 10;
                                                break;
                                            }

                                            _context2.next = 4;
                                            return iterator.next();

                                        case 4:
                                            result = _context2.sent;

                                            if (!result.done) {
                                                _context2.next = 7;
                                                break;
                                            }

                                            return _context2.abrupt('break', 10);

                                        case 7:

                                            value = result.value;
                                            _context2.next = 1;
                                            break;

                                        case 10:
                                            return _context2.abrupt('return', value);

                                        case 11:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        }));

                        function toPromise() {
                            return _ref.apply(this, arguments);
                        }

                        return toPromise;
                    }()
                }]);

                return Observable;
            }();

            exports.default = Observable; /**
                                           * Wrapper of Event emitter
                                           *
                                           * @typedef {function} EmitterWrapper
                                           *
                                           * @param {function} next
                                           * @param {function} done
                                           */
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            exports.default = function (URL, method, data, type) {

                return new _Observable2.default(function (next, done) {

                    var XHR = new XMLHttpRequest();

                    XHR.upload.onloadend = XHR.upload.onprogress = function (event) {
                        return next({
                            loaded: event.loaded,
                            total: event.total
                        });
                    };

                    XHR.onload = function () {
                        return done(XHR.response);
                    };

                    XHR.open(method || 'GET', URL);

                    XHR.responseType = type || 'text';

                    XHR.send(data);
                });
            };

            var _Observable = require('./Observable');

            var _Observable2 = _interopRequireDefault(_Observable);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }
        }
    }
};

    return require('./index');
});